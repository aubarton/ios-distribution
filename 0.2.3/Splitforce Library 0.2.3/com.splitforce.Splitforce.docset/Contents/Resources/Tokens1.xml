<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AriseAB.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AriseAB</TokenIdentifier>
			<Abstract type="html">Splitforce Arise Compatibility Layer.  These methods all replace AriseAB method calls with Splitforce equivalents.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/setupWithKey:rpcURL:</TokenIdentifier>
			<Abstract type="html">Calling this method raises an exception.  You should replace this call with the correct [SFManager managerWith...] call,
making sure to paste the correct AppId and AppKey from the Splitforce backend.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (AriseAB *)setupWithKey:(NSString *)appKey rpcURL:(NSString *)rpcURL</Declaration>
			
			
			<Anchor>//api/name/setupWithKey:rpcURL:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:data:</TokenIdentifier>
			<Abstract type="html">AriseAB Data Driven Test.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name data:(void ( ^ ) ( NSDictionary *testData ))dataCallbackBlock</Declaration>
			
			
			<Anchor>//api/name/testWithName:data:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with two code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with three code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with four code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with five code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:F:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with six code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE F:(void ( ^ ) ( void ))blockF</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:F:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:F:G:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with seven code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE F:(void ( ^ ) ( void ))blockF G:(void ( ^ ) ( void ))blockG</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:F:G:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:F:G:H:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with eight code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE F:(void ( ^ ) ( void ))blockF G:(void ( ^ ) ( void ))blockG H:(void ( ^ ) ( void ))blockH</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:F:G:H:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:F:G:H:I:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with nine code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE F:(void ( ^ ) ( void ))blockF G:(void ( ^ ) ( void ))blockG H:(void ( ^ ) ( void ))blockH I:(void ( ^ ) ( void ))blockI</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:F:G:H:I:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/testWithName:A:B:C:D:E:F:G:H:I:J:</TokenIdentifier>
			<Abstract type="html">AriseAB Simple Test with ten code paths.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)testWithName:(NSString *)name A:(void ( ^ ) ( void ))blockA B:(void ( ^ ) ( void ))blockB C:(void ( ^ ) ( void ))blockC D:(void ( ^ ) ( void ))blockD E:(void ( ^ ) ( void ))blockE F:(void ( ^ ) ( void ))blockF G:(void ( ^ ) ( void ))blockG H:(void ( ^ ) ( void ))blockH I:(void ( ^ ) ( void ))blockI J:(void ( ^ ) ( void ))blockJ</Declaration>
			
			
			<Anchor>//api/name/testWithName:A:B:C:D:E:F:G:H:I:J:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/goalReached:</TokenIdentifier>
			<Abstract type="html">AriseAB Goal - the goal name MUST match the name of the test.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (void)goalReached:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/goalReached:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AriseAB/colorFromHex:</TokenIdentifier>
			<Abstract type="html">AriseAB handy utility to convert RGB Hex string into a UIColor object.</Abstract>
			<DeclaredIn>AriseAB.h</DeclaredIn>			
			
			<Declaration>+ (UIColor *)colorFromHex:(NSString *)hex</Declaration>
			
			
			<Anchor>//api/name/colorFromHex:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
	</File>
</Tokens>